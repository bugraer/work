/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    stm32f1xx_it.c
  * @brief   Interrupt Service Routines.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f1xx_it.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include "st7735.h"
#include "fonts.h"
#include "pgmspace.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */

/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
 
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern CanTxMsgTypeDef            TxM;
extern CanRxMsgTypeDef            RxM;
extern char a;
extern char b;
extern char c;
extern char d;
extern char e;
extern char f;
extern char g;
extern char h;
/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/
extern CAN_HandleTypeDef hcan;
extern DMA_HandleTypeDef hdma_spi1_tx;
/* USER CODE BEGIN EV */

/* USER CODE END EV */

/******************************************************************************/
/*           Cortex-M3 Processor Interruption and Exception Handlers          */ 
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
}

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32F1xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
	{
		int8_t o;
		hcan.pTxMsg->ExtId = 0x18FF10;
hcan.pTxMsg->RTR=CAN_RTR_DATA;
hcan.pTxMsg->IDE = CAN_ID_EXT;
hcan.pTxMsg->DLC=0x08;
CAN1 ->FA1R=0x00000001;
		
		if(o==0)
			(
				hcan.pTxMsg->Data[0]=0x01;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
		o++;
		)
		if(o==1)
			(
				hcan.pTxMsg->Data[0]=0x02;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
		o++;
		)
		if(o==2)
			(
				hcan.pTxMsg->Data[0]=0x03;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
		o=0;
		)

		HAL_CAN_Transmit(&hcan, 100);
	
	}
	
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
	{
		int8_t p;
		hcan.pTxMsg->ExtId = 0x18FF10;
hcan.pTxMsg->RTR=CAN_RTR_DATA;
hcan.pTxMsg->IDE = CAN_ID_EXT;
hcan.pTxMsg->DLC=0x08;
CAN1 ->FA1R=0x00000001;
		
		if(p==0)
			(
				hcan.pTxMsg->Data[1]=0x01;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
		p++;
		)
		if(p==1)
			(
				hcan.pTxMsg->Data[1]=0x02;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
		p++;
		)
		if(p==2)
			(
				hcan.pTxMsg->Data[1]=0x03;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
		p=0;
		)

		HAL_CAN_Transmit(&hcan, 100);
	
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
	{
		int8_t u;
		hcan.pTxMsg->ExtId = 0x18FF10;
hcan.pTxMsg->RTR=CAN_RTR_DATA;
hcan.pTxMsg->IDE = CAN_ID_EXT;
hcan.pTxMsg->DLC=0x08;
CAN1 ->FA1R=0x00000001;
		
		if(u==0)
			(
				hcan.pTxMsg->Data[2]=0x01;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);

		u++;
		)
		if(u==1)
			(
				hcan.pTxMsg->Data[2]=0x00;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

		u++;
		)
	

		HAL_CAN_Transmit(&hcan, 100);
	
	}
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
	{
		int8_t y;
		hcan.pTxMsg->ExtId = 0x18FF10;
hcan.pTxMsg->RTR=CAN_RTR_DATA;
hcan.pTxMsg->IDE = CAN_ID_EXT;
hcan.pTxMsg->DLC=0x08;
CAN1 ->FA1R=0x00000001;
		
		if(y==0)
			(
				hcan.pTxMsg->Data[3]=0x01;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);

		y++;
		)
		if(y==1)
			(
				hcan.pTxMsg->Data[3]=0x00;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);

		y++;
		)
	

		HAL_CAN_Transmit(&hcan, 100);
	
	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}


{
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))
	{
		int8_t t;
		hcan.pTxMsg->ExtId = 0x18FF10;
hcan.pTxMsg->RTR=CAN_RTR_DATA;
hcan.pTxMsg->IDE = CAN_ID_EXT;
hcan.pTxMsg->DLC=0x08;
CAN1 ->FA1R=0x00000001;
		
		if(t==0)
			(
				hcan.pTxMsg->Data[4]=0x01;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
		t++;
		)
		if(t==1)
			(
				hcan.pTxMsg->Data[4]=0x00;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
		t++;
		)
	

		HAL_CAN_Transmit(&hcan, 100);
	
	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}


void EXTI6_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 6 */
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
	{
		int8_t r;
		hcan.pTxMsg->ExtId = 0x18FF10;
hcan.pTxMsg->RTR=CAN_RTR_DATA;
hcan.pTxMsg->IDE = CAN_ID_EXT;
hcan.pTxMsg->DLC=0x08;
CAN1 ->FA1R=0x00000001;
		
		if(r==0)
			(
				hcan.pTxMsg->Data[5]=0x01;
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
		p++;
		)
		if(r==1)
			(
				hcan.pTxMsg->Data[5]=0x02;
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
		r++;
		)
		if(r==2)
			(
				hcan.pTxMsg->Data[5]=0x03;
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
		r=0;
		)

		HAL_CAN_Transmit(&hcan, 100);
	
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
	
HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
			
	a=hcan.pRxMsg->Data[0];
	b=hcan.pRxMsg->Data[1];
	c=hcan.pRxMsg->Data[2];
  d=hcan.pRxMsg->Data[3];
	e=hcan.pRxMsg->Data[4];
  f=hcan.pRxMsg->Data[5];
	g=hcan.pRxMsg->Data[6];
  h=hcan.pRxMsg->Data[7];

	 hcan.pRxMsg->Data[0] = (uint8_t)0xFFU & hcan.Instance->sFIFOMailBox[0].RDLR;
  hcan.pRxMsg->Data[1] = (uint8_t)0xFFU & (hcan.Instance->sFIFOMailBox[0].RDLR >> 8U);
  hcan.pRxMsg->Data[2] = (uint8_t)0xFFU & (hcan.Instance->sFIFOMailBox[0].RDLR >> 16U);
  hcan.pRxMsg->Data[3] = (uint8_t)0xFFU & (hcan.Instance->sFIFOMailBox[0].RDLR >> 24U);
  hcan.pRxMsg->Data[4] = (uint8_t)0xFFU & hcan.Instance->sFIFOMailBox[0].RDHR;
  hcan.pRxMsg->Data[5] = (uint8_t)0xFFU & (hcan.Instance->sFIFOMailBox[0].RDHR >> 8U);
  hcan.pRxMsg->Data[6] = (uint8_t)0xFFU & (hcan.Instance->sFIFOMailBox[0].RDHR >> 16U);
  hcan.pRxMsg->Data[7] = (uint8_t)0xFFU & (hcan.Instance->sFIFOMailBox[0].RDHR >> 24U);
	
ST7735_DrawString(55, 10, (const char*) a, Font_7x10, ST7735_BLACK, ST7735_WHITE);
ST7735_DrawString(55, 110, (const char*) b, Font_7x10, ST7735_BLACK, ST7735_WHITE);
ST7735_DrawString(125, 10, (const char*) c, Font_7x10, ST7735_BLACK, ST7735_WHITE);
ST7735_DrawString(125, 110, (const char*) d, Font_7x10, ST7735_BLACK, ST7735_WHITE);

HAL_CAN_Receive_IT(&hcan, 1);
	
  /* USER CODE END CAN1_RX1_IRQn 1 */
}

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
